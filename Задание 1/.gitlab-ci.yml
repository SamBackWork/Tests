# Определяем общие переменные, которые будут использоваться в разных этапах
variables:
  CONTAINER_IMAGE: $CI_REGISTRY_IMAGE/my-app  # Замени my-app на имя своего приложения

# Определяем этапы (stages), которые будут выполняться
stages:
  - build
  - release
  - migrate
  - deploy

# Сборка Docker-образов
build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $CONTAINER_IMAGE-backend:${CI_COMMIT_REF_SLUG}_${CI_COMMIT_SHA} -f Dockerfile.backend .
    - docker push $CONTAINER_IMAGE-backend:${CI_COMMIT_REF_SLUG}_${CI_COMMIT_SHA}
    - docker build -t $CONTAINER_IMAGE-frontend:${CI_COMMIT_REF_SLUG}_${CI_COMMIT_SHA} -f Dockerfile.frontend .
    - docker push $CONTAINER_IMAGE-frontend:${CI_COMMIT_REF_SLUG}_${CI_COMMIT_SHA}
  only:
    - main
    - merge_requests

# Добавление тега :latest к образам
release:
  stage: release
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CONTAINER_IMAGE-backend:${CI_COMMIT_REF_SLUG}_${CI_COMMIT_SHA}
    - docker tag $CONTAINER_IMAGE-backend:${CI_COMMIT_REF_SLUG}_${CI_COMMIT_SHA} $CONTAINER_IMAGE-backend:latest
    - docker push $CONTAINER_IMAGE-backend:latest
    - docker pull $CONTAINER_IMAGE-frontend:${CI_COMMIT_REF_SLUG}_${CI_COMMIT_SHA}
    - docker tag $CONTAINER_IMAGE-frontend:${CI_COMMIT_REF_SLUG}_${CI_COMMIT_SHA} $CONTAINER_IMAGE-frontend:latest
    - docker push $CONTAINER_IMAGE-frontend:latest
  needs: ["build"]
  only:
    - main
    - merge_requests

# Миграции базы данных (предполагаем, что используем Django)
migrate:
  stage: migrate
  image: bitnami/kubectl:latest # Образ с kubectl
  before_script:
      # 1. Способ через переменную окружения (менее безопасно). Закомментирован, нужен один!
      #- echo "$KUBE_CONFIG" > kubeconfig
      #- export KUBECONFIG=kubeconfig
    # 2. Правильный и современный - использовать GitLab Kubernetes Agent (рекомендуется)
    # В этом случае ничего прописывать не нужно, GitLab Agent сам настроит доступ.
    # Убедитесь, что агент настроен в вашем проекте и кластере.
  script:
    - kubectl apply -f k8s/migrate-job.yaml
    - kubectl wait --for=condition=complete --timeout=300s job/db-migrate
  needs: ["release"]
  only:
   - main

# Развертывание приложения в Kubernetes
deploy:
  stage: deploy
  image: bitnami/kubectl:latest
  before_script:
      # 1. Способ через переменную окружения (менее безопасно). Закомментирован, нужен один!
      #- echo "$KUBE_CONFIG" > kubeconfig
      #- export KUBECONFIG=kubeconfig
    # 2. Правильный и современный - использовать GitLab Kubernetes Agent (рекомендуется)
  script:
    - kubectl apply -f k8s/deployment.yaml
    - kubectl apply -f k8s/service.yaml
  needs: ["migrate"]
  only:
    - main